# Generated by Django 3.2.15 on 2022-09-08 20:23

from django.db import migrations, models, transaction, DatabaseError
from dataedit.models import Table
from api.actions import has_table, set_table_metadata, get_comment_table
from dataedit.management.commands.mirror import migrate

def migrate_metadata(apps, schema_editor):
    success = migrate(check=True, verbose=False)
    if not success:
        raise DatabaseError("Database and models do not align. Please run `manage.py mirror --check` for more information.")
    try:
        with transaction.atomic():
            for table in Table.objects.all():
                if has_table(dict(schema=table.schema.name, table=table.name)):
                    metadata = get_comment_table(table.schema.name, table.name)
                    # TODO: IF metadata is none or {} as returned above we should add oemetadata bronze
                    #       keys to oemetadata strings - latest defenition is not public so far:    
                    #           table id(URL, is omi required field), 
                    #           ressources ressources.schema keys - fieds name, type, (required by oem2orm if realational model),
                    #           ressources.obj.name (schema.name - required by oem2orm)
                    set_table_metadata(schema=table.schema.name, table=table.name, metadata=metadata)
    except:
        print("An error occured during the migration of metadata")
        raise


def migrate_metadata_rev(apps, schema_editor):
    try:
        with transaction.atomic():
            for table in Table.objects.all():
                if has_table(dict(schema=table.schema.name, table=table.name)):
                    table.oemetadata = None
                    table.save()
    except:
        print("An error occured during the migration of metadata")
        raise


class Migration(migrations.Migration):

    dependencies = [
        ('dataedit', '0018_auto_20220607_1829'),
    ]

    operations = [
        migrations.AddField(
            model_name='table',
            name='oemetadata',
            field=models.JSONField(null=True),
        ),
    ]
