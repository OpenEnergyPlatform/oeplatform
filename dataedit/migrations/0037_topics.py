# SPDX-FileCopyrightText: 2025 Christian Winger
#
# SPDX-License-Identifier: AGPL-3.0-or-later


# Generated by Django 5.1.4 on 2025-10-03 13:25

"""
- create default topics
- assign table topics (from schema, except model_draft/sandbox)
- assign is_sandbox
"""

from django.db import migrations, models

from oeplatform.securitysettings import SCHEMA_DEFAULT_TEST_SANDBOX

TOPICS = [  # from dataedit/views.py:schema_whitelist
    "boundaries",
    "climate",
    "demand",
    "economy",
    "emission",
    "environment",
    "grid",
    # "model_draft", # this will not be a topic, instead, we have is_publish field
    "openstreetmap",
    "policy",
    "reference",
    "scenario",
    "society",
    "supply",
]


def migrate_topics(apps, schema_editor):
    Topic = apps.get_model("dataedit", "Topic")
    Table = apps.get_model("dataedit", "Table")

    # create topics
    for topic in TOPICS:
        Topic(name=topic).save()

    for table in Table.objects.all():
        schema = table.schema.name
        if schema == SCHEMA_DEFAULT_TEST_SANDBOX:
            is_sandbox = True
            is_published = False
            topics = []
        else:
            is_sandbox = False
            if schema == "model_draft":
                topics = []
                is_published = False
            else:
                topics = [schema]
                is_published = True

        table.is_sandbox = is_sandbox
        table.is_publish = is_published

        # this should wotk because
        # schema name == topic name == primary key of class Topic
        table.topics.add(*topics)

        table.save()


def migrate_topics_reverse(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("dataedit", "0036_alter_peerreview_oemetadata"),
    ]

    operations = [
        migrations.CreateModel(
            name="Topic",
            fields=[
                (
                    "name",
                    models.CharField(max_length=128, primary_key=True, serialize=False),
                ),
            ],
        ),
        migrations.AddField(
            model_name="table",
            name="is_sandbox",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="table",
            name="topics",
            field=models.ManyToManyField(to="dataedit.topic"),
        ),
        migrations.RunPython(migrate_topics, migrate_topics_reverse),
    ]
