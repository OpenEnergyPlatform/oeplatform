# Generated by Django 3.2.20 on 2023-08-16 12:47

import logging

from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations, models

from oeplatform.settings import MANAGED_SCHEMAS


def create_topics(apps, schema_editor):
    Topic = apps.get_model("dataedit", "Topic")

    for name, description in {
        "boundaries": "Data that depicts boundaries, such as geographic, administrative or political boundaries. Such data comes as polygons.",  # noqa
        "climate": "Data related to climate and weather. This includes, for example, precipitation, temperature, cloud cover and atmospheric conditions.",  # noqa
        "economy": "Data related to economic activities. Examples: sectoral value added, sectoral inputs and outputs, GDP, prices of commodities etc.",  # noqa
        "demand": "Data on demand. Demand can relate to commodities but also to services.",  # noqa
        "grid": "Energy transmission infrastructure. examples: power lines, substation, pipelines",  # noqa
        "supply": "Data on supply. Supply can relate to commodities but also to services.",  # noqa
        "environment": "environmental resources, protection and conservation. examples: environmental pollution, waste storage and treatment, environmental impact assessment, monitoring environmental risk, nature reserves, landscape",  # noqa
        "society": "Demographic data such as population statistics and projections, fertility, mortality etc.",  # noqa
        # "model_draft": "Unfinished data of any kind. Note: there is no version control and data is still volatile.",  # noqa
        "scenario": "Scenario data in the broadest sense. Includes input and output data from models that project scenarios into the future. Example inputs: assumptions made about future developments of key parameters such as energy prices and GDP. Example outputs: projected electricity transmission, projected greenhouse gas emissions. Note that inputs to one model could be an output of another model and the other way around.",  # noqa
        "reference": "Contains sources, literature and auxiliary/helper tables that can help you with your work.",  # noqa
        "emission": "Data on emissions. Examples: total greenhouse gas emissions, CO2-emissions, energy-related CO2-emissions, methane emissions, air pollutants etc.",  # noqa
        "openstreetmap": "OpenStreetMap is a open project that collects and structures freely usable geodata and keeps them in a database for use by anyone. This data is available under a free license, the Open Database License.",  # noqa
        "policy": "Data on policies and measures. This could, for example, include a list of renewable energy policies per European Member State. It could also be a list of climate related policies and measures in a specific country.",  # noqa
    }.items():
        Topic(name=name, description=description).save()


def convert_schema_to_topic(apps, schema_editor):
    """use old schema names as topic(s), if possible"""

    Topic = apps.get_model("dataedit", "Topic")
    Table = apps.get_model("dataedit", "Table")
    for table in Table.objects.all():
        name = table.schema.name

        # skip if in model_draft, sandbox, or datasets
        if name in MANAGED_SCHEMAS:
            continue

        try:
            topic = Topic.objects.get(name=name)
            # logging.info(f"topic/schema name for table {table}: {topic}")
        except ObjectDoesNotExist:
            logging.warning(f"Invalid topic/schema name for table {table}: {name}")
            continue

        table.topics.add(topic)


def do_nothing(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("dataedit", "0029_alter_peerreviewmanager_current_reviewer"),
    ]

    operations = [
        migrations.CreateModel(
            name="Topic",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=64, unique=True)),
                ("description", models.TextField(max_length=2048)),
            ],
        ),
        migrations.AddField(
            model_name="table",
            name="topics",
            field=models.ManyToManyField(to="dataedit.Topic", related_name="tables"),
        ),
        migrations.RunPython(create_topics, do_nothing),
        migrations.RunPython(convert_schema_to_topic, do_nothing),
    ]
